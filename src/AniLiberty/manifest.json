{
  "id": "aniliberty",
  "name": "AniLiberty",
  "description": "AniLiberty is an online streaming provider for Russian anime with high-quality streams",
  "manifestURI": "https://raw.githubusercontent.com/cuteceo/seanime-aniliberty-provider/main/src/AniLiberty/manifest.json",
  "version": "1.0.4",
  "author": "cuteceo",
  "type": "onlinestream-provider",
  "language": "typescript",
  "lang": "ru",
  "payload": "/// <reference path=\"./online-streaming-provider.d.ts\" />\n/// <reference path=\"./doc.d.ts\"/>\n\nclass Provider {\n  api = \"https://anilibria.top/api/v1\";\n  timeout = 15000; // 15 seconds timeout\n  \n  getSettings(): Settings {\n    return {\n      episodeServers: [\"AniLiberty Server\"],\n      supportsDub: false, // AniLiberty only has Russian dubs\n    };\n  }\n\n  async search(query: SearchOptions): Promise<SearchResult[]> {\n    let normalizedQuery = this.normalizeQuery(query[\"query\"]);\n    console.log(\"AniLiberty: Searching for: \" + normalizedQuery);\n\n    const url = `${this.api}/app/search/releases?query=${encodeURIComponent(normalizedQuery)}`;\n\n    try {\n      const response = await this._makeRequest(url);\n      const data = JSON.parse(response);\n      \n      console.log(\"AniLiberty: Search response length:\", data.length);\n      \n      if (!Array.isArray(data) || data.length === 0) {\n        console.log(\"AniLiberty: No results found\");\n        throw new Error(\"No results found for: \" + normalizedQuery);\n      }\n\n      const animes: SearchResult[] = [];\n      \n      data.forEach((release: any) => {\n        const title = release.name?.main || release.name?.english || \"Unknown Title\";\n        \n        const anime: SearchResult = {\n          id: release.id.toString(),\n          url: `${this.api}/anime/releases/${release.id}`,\n          title: title,\n          subOrDub: \"sub\", // AniLiberty is Russian-focused\n        };\n\n        animes.push(anime);\n        console.log(\"AniLiberty: Found anime:\", title, \"ID:\", release.id);\n      });\n\n      console.log(\"AniLiberty: Total results:\", animes.length);\n      return animes;\n    }\n    catch (ex: any) {\n      console.error(\"AniLiberty: Search error:\", ex);\n      throw new Error(`Search failed: ${ex.message}`);\n    }\n  }\n\n  async findEpisodes(id: string): Promise<EpisodeDetails[]> {\n    const url = `${this.api}/anime/releases/${id}`;\n    console.log(\"AniLiberty: Finding episodes for ID:\", id);\n\n    try {\n      const response = await this._makeRequest(url);\n      const data = JSON.parse(response);\n      \n      console.log(\"AniLiberty: Release data keys:\", Object.keys(data));\n      \n      if (!data.episodes || data.episodes.length === 0) {\n        console.log(\"AniLiberty: No episodes found\");\n        throw new Error(\"No episodes found for this anime\");\n      }\n\n      const episodes: EpisodeDetails[] = [];\n      \n      data.episodes.forEach((episode: any) => {\n        const episodeDetails: EpisodeDetails = {\n          id: episode.id,\n          number: episode.ordinal || episode.sort_order || 1,\n          title: episode.name || `Episode ${episode.ordinal || episode.sort_order || 1}`,\n          url: `${this.api}/anime/releases/episodes/${episode.id}`\n        };\n\n        episodes.push(episodeDetails);\n        console.log(\"AniLiberty: Found episode:\", episodeDetails.title, \"ID:\", episode.id);\n      });\n\n      // Sort episodes by ordinal/sort_order\n      episodes.sort((a, b) => (a.number || 0) - (b.number || 0));\n\n      console.log(\"AniLiberty: Total episodes:\", episodes.length);\n      return episodes;\n    }\n    catch (ex: any) {\n      console.error(\"AniLiberty: Episode error:\", ex);\n      throw new Error(`Failed to get episodes: ${ex.message}`);\n    }\n  }\n\n  async findEpisodeServer(\n    episode: EpisodeDetails,\n    _server: string\n  ): Promise<EpisodeServer> {\n    let server = \"AniLiberty Server\";\n    if (_server !== \"default\") server = _server;\n\n    console.log(\"AniLiberty: Getting streams for episode:\", episode.title, \"URL:\", episode.url);\n\n    try {\n      const response = await this._makeRequest(episode.url);\n      const data = JSON.parse(response);\n      \n      console.log(\"AniLiberty: Episode data keys:\", Object.keys(data));\n      console.log(\"AniLiberty: HLS streams:\", {\n        hls_1080: data.hls_1080 ? \"Available\" : \"Not available\",\n        hls_720: data.hls_720 ? \"Available\" : \"Not available\",\n        hls_480: data.hls_480 ? \"Available\" : \"Not available\"\n      });\n      \n      const videoSources: VideoSource[] = [];\n      \n      // Add available quality streams\n      if (data.hls_1080) {\n        videoSources.push({\n          quality: \"1080p\",\n          subtitles: [],\n          type: \"m3u8\",\n          url: data.hls_1080\n        });\n        console.log(\"AniLiberty: Added 1080p stream\");\n      }\n      \n      if (data.hls_720) {\n        videoSources.push({\n          quality: \"720p\",\n          subtitles: [],\n          type: \"m3u8\",\n          url: data.hls_720\n        });\n        console.log(\"AniLiberty: Added 720p stream\");\n      }\n      \n      if (data.hls_480) {\n        videoSources.push({\n          quality: \"480p\",\n          subtitles: [],\n          type: \"m3u8\",\n          url: data.hls_480\n        });\n        console.log(\"AniLiberty: Added 480p stream\");\n      }\n\n      if (videoSources.length === 0) {\n        console.log(\"AniLiberty: No video sources found\");\n        throw new Error(\"No video sources found for this episode\");\n      }\n\n      const episodeServer: EpisodeServer = {\n        server: server,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0\",\n          \"Referer\": \"https://anilibria.top/\",\n          \"Accept\": \"application/json, text/plain, */*\",\n          \"Accept-Language\": \"ru-RU,ru;q=0.9,en;q=0.8\",\n          \"DNT\": \"1\",\n          \"Cache-Control\": \"no-cache\",\n          \"Pragma\": \"no-cache\",\n          \"Origin\": \"https://anilibria.top\"\n        },\n        videoSources: videoSources\n      };\n\n      console.log(\"AniLiberty: Created server with\", videoSources.length, \"sources\");\n      return episodeServer;\n    }\n    catch (e: any) {\n      console.error(\"AniLiberty: Stream error:\", e);\n      throw new Error(`Failed to get streams: ${e.message}`);\n    }\n  }\n\n  normalizeQuery(query: string): string {\n    let normalizedQuery = query\n      .replace(/\\b(\\d+)(st|nd|rd|th)\\b/g, \"$1\") // Removes suffixes from numbers\n      .replace(/\\s+/g, \" \") // Replaces multiple whitespaces with single\n      .replace(/(\\d+)\\s*Season/i, \"$1\") // Removes season and keeps number\n      .replace(/Season\\s*(\\d+)/i, \"$1\") // Removes season and keeps number\n      .replace(/~/g, \" \") // Removes ~\n      .trim();\n\n    console.log(\"AniLiberty: Normalized query:\", normalizedQuery);\n    return normalizedQuery;\n  }\n\n  async _makeRequest(url: string): Promise<string> {\n    console.log(\"AniLiberty: Making request to:\", url);\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n    \n    try {\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"DNT\": \"1\",\n          \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0\",\n          \"Accept\": \"application/json, text/plain, */*\",\n          \"Accept-Language\": \"ru-RU,ru;q=0.9,en;q=0.8\",\n          \"Referer\": \"https://anilibria.top/\",\n          \"Cache-Control\": \"no-cache\",\n          \"Origin\": \"https://anilibria.top\"\n        },\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const body = await response.text();\n      console.log(\"AniLiberty: Response received, length:\", body.length);\n      return body;\n    } catch (error: any) {\n      clearTimeout(timeoutId);\n      \n      if (error.name === 'AbortError') {\n        throw new Error(`Request timeout after ${this.timeout}ms`);\n      }\n      \n      console.error(\"AniLiberty: Request failed:\", error);\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n}\n"
} 