{
  "id": "aniliberty",
  "name": "AniLiberty",
  "description": "AniLiberty is an online streaming provider for Russian anime with high-quality streams",
  "manifestURI": "https://raw.githubusercontent.com/cuteceo/seanime-aniliberty-provider/main/src/AniLiberty/manifest.json",
  "version": "1.1.1",
  "author": "cuteceo",
  "type": "onlinestream-provider",
  "language": "typescript",
  "lang": "ru",
  "payload": "/// <reference path=\"./online-streaming-provider.d.ts\" />\n/// <reference path=\"./doc.d.ts\"/>\n\nclass Provider {\n  api = \"https://anilibria.top/api/v1\";\n  headers = { \n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0\",\n    \"Referer\": \"https://anilibria.top/\",\n    \"Accept\": \"application/json, text/plain, */*\",\n    \"Accept-Language\": \"ru-RU,ru;q=0.9,en;q=0.8\"\n  };\n  \n  getSettings(): Settings {\n    return {\n      episodeServers: [\"AniLiberty Server\"],\n      supportsDub: false,\n    };\n  }\n\n  async search(opts: SearchOptions): Promise<SearchResult[]> {\n    const query = opts.query;\n    console.log(\"AniLiberty: Searching for:\", query);\n\n    const url = `${this.api}/app/search/releases?query=${encodeURIComponent(query)}`;\n\n    try {\n      const response = await fetch(url, {\n        headers: this.headers\n      });\n      \n      if (!response.ok) {\n        console.error(\"AniLiberty: Search request failed:\", response.status);\n        return [];\n      }\n      \n      const data = await response.json();\n      \n      if (!Array.isArray(data) || data.length === 0) {\n        console.log(\"AniLiberty: No results found\");\n        return [];\n      }\n\n      const results: SearchResult[] = [];\n      \n      data.forEach((release: any) => {\n        const title = release.name?.main || release.name?.english || \"Unknown Title\";\n        \n        results.push({\n          id: release.id.toString(),\n          title: title,\n          url: \"\",\n          subOrDub: \"sub\",\n        });\n        \n        console.log(\"AniLiberty: Found anime:\", title, \"ID:\", release.id);\n      });\n\n      console.log(\"AniLiberty: Total results:\", results.length);\n      return results;\n    }\n    catch (ex: any) {\n      console.error(\"AniLiberty: Search error:\", ex);\n      return [];\n    }\n  }\n\n  async findEpisodes(id: string): Promise<EpisodeDetails[]> {\n    const url = `${this.api}/anime/releases/${id}`;\n    console.log(\"AniLiberty: Finding episodes for ID:\", id);\n\n    try {\n      const response = await fetch(url, {\n        headers: this.headers\n      });\n      \n      if (!response.ok) {\n        console.error(\"AniLiberty: Episode request failed:\", response.status);\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.episodes || data.episodes.length === 0) {\n        console.log(\"AniLiberty: No episodes found\");\n        throw new Error(\"No episodes found\");\n      }\n\n      const episodes: EpisodeDetails[] = [];\n      \n      data.episodes.forEach((episode: any) => {\n        episodes.push({\n          id: episode.id,\n          number: episode.ordinal || episode.sort_order || 1,\n          title: episode.name || `Episode ${episode.ordinal || episode.sort_order || 1}`,\n          url: `${this.api}/anime/releases/episodes/${episode.id}`\n        });\n        \n        console.log(\"AniLiberty: Found episode:\", episode.name || episode.ordinal, \"ID:\", episode.id);\n      });\n\n      // Sort episodes by number\n      episodes.sort((a, b) => a.number - b.number);\n\n      // Normalize episode numbers (start from 1)\n      const lowest = episodes[0].number;\n      if (lowest > 1) {\n        for (let i = 0; i < episodes.length; i++) {\n          episodes[i].number = episodes[i].number - lowest + 1;\n        }\n      }\n\n      // Remove episodes with decimal numbers\n      const filteredEpisodes = episodes.filter((episode) => Number.isInteger(episode.number));\n\n      console.log(\"AniLiberty: Total episodes:\", filteredEpisodes.length);\n      return filteredEpisodes;\n    }\n    catch (ex: any) {\n      console.error(\"AniLiberty: Episode error:\", ex);\n      throw new Error(`Failed to get episodes: ${ex.message}`);\n    }\n  }\n\n  async findEpisodeServer(episode: EpisodeDetails, _server: string): Promise<EpisodeServer> {\n    const server = \"AniLiberty Server\";\n    console.log(\"AniLiberty: Getting streams for episode:\", episode.title, \"URL:\", episode.url);\n\n    try {\n      const response = await fetch(episode.url, {\n        headers: this.headers\n      });\n      \n      if (!response.ok) {\n        console.error(\"AniLiberty: Stream request failed:\", response.status);\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      console.log(\"AniLiberty: Episode data keys:\", Object.keys(data));\n      \n      const videoSources: VideoSource[] = [];\n      \n      // Add available quality streams\n      if (data.hls_1080) {\n        videoSources.push({\n          quality: \"1080p\",\n          subtitles: [],\n          type: \"m3u8\",\n          url: data.hls_1080\n        });\n        console.log(\"AniLiberty: Added 1080p stream\");\n      }\n      \n      if (data.hls_720) {\n        videoSources.push({\n          quality: \"720p\",\n          subtitles: [],\n          type: \"m3u8\",\n          url: data.hls_720\n        });\n        console.log(\"AniLiberty: Added 720p stream\");\n      }\n      \n      if (data.hls_480) {\n        videoSources.push({\n          quality: \"480p\",\n          subtitles: [],\n          type: \"m3u8\",\n          url: data.hls_480\n        });\n        console.log(\"AniLiberty: Added 480p stream\");\n      }\n\n      if (videoSources.length === 0) {\n        console.log(\"AniLiberty: No video sources found\");\n        throw new Error(\"No video sources found\");\n      }\n\n      const result: EpisodeServer = {\n        server: server,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, X-Requested-With\",\n          \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0\",\n          \"Referer\": \"https://anilibria.top/\",\n          \"Accept\": \"application/json, text/plain, */*\",\n          \"Accept-Language\": \"ru-RU,ru;q=0.9,en;q=0.8\",\n          \"DNT\": \"1\",\n          \"Cache-Control\": \"no-cache\",\n          \"Pragma\": \"no-cache\",\n          \"Origin\": \"https://anilibria.top\",\n          \"Sec-Fetch-Dest\": \"empty\",\n          \"Sec-Fetch-Mode\": \"cors\",\n          \"Sec-Fetch-Site\": \"cross-site\"\n        },\n        videoSources: videoSources\n      };\n\n      console.log(\"AniLiberty: Created server with\", videoSources.length, \"sources\");\n      return result;\n    }\n    catch (e: any) {\n      console.error(\"AniLiberty: Stream error:\", e);\n      throw new Error(`Failed to get streams: ${e.message}`);\n    }\n  }\n}\n"
} 